name: GCC Linux Build
on: [push, pull_request]

# Use custom shell with -l so .bash_profile is sourced which loads intel/oneapi/setvars.sh
# without having to do it in manually every step
defaults:
  run:
    shell: bash -leo pipefail {0}

env:
  cache_key: gcc5  # The number (#) following the cache_key "intel" is to flush Action cache.
  CC: gcc-10
  FC: gfortran-10
  CXX: g++-10
  env_name: ufs-utils-env

jobs:
  gcc-setup:
    runs-on: ubuntu-latest

    steps:
    - name: checkout-ufs-utils
      uses: actions/checkout@v2
      with: 
        submodules: recursive
        path: ufs-utils

    - name: cache-env
      id: cache-env
      uses: actions/cache@v2
      with:
        path: |
          spack
          ~/.spack
        key: spack-${{ runner.os }}-${{ env.cache_key }}-${{ hashFiles('ufs-utils/ci/spack.yaml') }}

    # Install dependencies using Spack
    - name: install-dependencies-with-spack
      if: steps.cache-env.outputs.cache-hit != 'true'
      run: |
        git clone -c feature.manyFiles=true https://github.com/NOAA-EMC/spack.git
        source spack/share/spack/setup-env.sh
        spack env create ufs-utils-env ufs-utils/ci/spack.yaml
        spack env activate ${{ env.env_name }}

        spack compiler find
        spack external find
        spack external find python perl wget m4
        spack add mpich@3.4.2
        spack concretize
        spack install

  build-and-test:
    needs: gcc-setup
    runs-on: ubuntu-latest

    strategy:
      matrix:
        build_type: [Release, Debug]

    steps:
    - name: checkout-ufs-utils
      uses: actions/checkout@v2
      with: 
        submodules: recursive
        path: ufs-utils
  
    - name: cache-env
      id: cache-env
      uses: actions/cache@v2
      with:
        path: |
          spack
          ~/.spack
        key: spack-${{ runner.os }}-${{ env.cache_key }}-${{ hashFiles('ufs-utils/ci/spack.yaml') }}

    - name: build
      run: |
        source spack/share/spack/setup-env.sh
        spack env activate ${{ env.env_name }}
        export CC=mpicc
        export FC=mpif90
        cd ufs-utils
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        make -j2

    - name: test
      run: |
        source spack/share/spack/setup-env.sh
        spack env activate ${{ env.env_name }}
        cd ufs-utils/build
        export LSAN_OPTIONS=suppressions=LSanSuppress.supp
        ctest --verbose

  test-coverage:
    needs: gcc-setup
    runs-on: ubuntu-latest

    steps:
    - name: checkout-ufs-utils
      uses: actions/checkout@v2
      with: 
        submodules: recursive
        path: ufs-utils
  
    - name: cache-env
      id: cache-env
      uses: actions/cache@v2
      with:
        path: |
          spack
          ~/.spack
        key: spack-${{ runner.os }}-${{ env.cache_key }}-${{ hashFiles('ufs-utils/ci/spack.yaml') }}
  
    - name: build
      run: |
        source spack/share/spack/setup-env.sh
        spack env activate ${{ env.env_name }}
        cd ufs-utils
        mkdir build && cd build
        cmake .. DCMAKE_BUILD_TYPE=Debug -DCMAKE_Fortran_FLAGS="-fprofile-arcs -ftest-coverage -O0"
        make -j2
    
    - name: test
      run: |
        source spack/share/spack/setup-env.sh
        spack env activate ${{ env.env_name }}
        cd ufs-utils/build
        export LSAN_OPTIONS=suppressions=LSanSuppress.supp
        ctest --verbose
        gcovr -r .. --html-details -o test-coverage.html

    - uses: actions/upload-artifact@v2
      with:
        name: test-coverage
        path: ufs-utils/build/*.html

  docs:
    needs: gcc-setup
    runs-on: ubuntu-latest

    steps:
    - name: checkout-ufs-utils
      uses: actions/checkout@v2
      with: 
        submodules: recursive
        path: ufs-utils

    - name: cache-env
      id: cache-env
      uses: actions/cache@v2
      with:
        path: |
          spack
          ~/.spack
        key: spack-${{ runner.os }}-${{ env.cache_key }}-${{ hashFiles('ufs-utils/ci/spack.yaml') }}

    - name: install-doxygen
      run: |
        sudo apt-get install doxygen
  
    - name: build-docs
      run: |
        source spack/share/spack/setup-env.sh
        spack env activate ${{ env.env_name }}
        cd ufs-utils
        mkdir build && cd build
        cmake .. -DENABLE_DOCS=ON
        make doc
    
    - uses: actions/upload-artifact@v2
      with:
        name: docs
        path: ufs-utils/build/*.html
