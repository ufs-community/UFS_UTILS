name: intel
on: [push, pull_request]

# Use custom shell with -l so .bash_profile is sourced which loads intel/oneapi/setvars.sh
# without having to do it in manually every step
defaults:
  run:
    shell: bash -leo pipefail {0}

env:
  cache_key: intel3  # The number (#) following the cache_key "intel" is to flush Action cache.
  CC: icc
  FC: ifort
  CXX: icpc
  I_MPI_CC: icc
  I_MPI_F90: ifort

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
    - name: cache-env
      id: cache-env
      uses: actions/cache@v2
      with:
        path: |
          spack
          ~/.spack
          /opt/intel
        key: spack-${{ runner.os }}-${{ env.cache_key }}

    # See https://software.intel.com/content/www/us/en/develop/articles/oneapi-repo-instructions.html
    - name: install-intel
      if: steps.cache-env.outputs.cache-hit != 'true'
      run: |
        cd /tmp
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install intel-oneapi-dev-utilities intel-oneapi-mpi-devel intel-oneapi-openmp intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic

    - name: checkout-ufs-utils
      uses: actions/checkout@v2
      with: 
        submodules: recursive

    - name: setup-env
      run: |
        echo "source /opt/intel/oneapi/setvars.sh" >> ~/.bash_profile

    # Install dependencies using Spack
    - name: install-dependencies-with-spack
      if: steps.cache-env.outputs.cache-hit != 'true'
      run: |
        git clone -c feature.manyFiles=true https://github.com/NOAA-EMC/spack.git
        source spack/share/spack/setup-env.sh
        spack env create ufs-utils-env ci/spack.yaml
        spack env activate ufs-utils-env
        spack compiler find
        spack external find
        spack add intel-oneapi-mpi
        spack concretize
        spack install --dirty -v

    - name: build
      run: |
        source spack/share/spack/setup-env.sh
        spack env activate ufs-utils-env
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug
        make -j2
    
    - name: test
      run: |
        source spack/share/spack/setup-env.sh
        spack env activate ufs-utils-env
        cd ufs_utils/build
        ctest --rerun-failed --output-on-failure
