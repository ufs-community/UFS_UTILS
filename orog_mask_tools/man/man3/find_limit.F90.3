.TH "/scratch1/NCEPDEV/da/George.Gayno/ufs_utils.git/UFS_UTILS.upstream/sorc/orog_mask_tools.fd/lake.fd/find_limit.F90" 3 "Thu Jun 20 2024" "Version 1.13.0" "orog_mask_tools" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/scratch1/NCEPDEV/da/George.Gayno/ufs_utils.git/UFS_UTILS.upstream/sorc/orog_mask_tools.fd/lake.fd/find_limit.F90 \- Geo-reference utilities for a cubed-sphere grid\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions/Subroutines"

.in +1c
.ti -1c
.RI "subroutine \fBfind_limit\fP (p1_in, p2_in, latmin, latmax)"
.br
.RI "Given two points on a cubed-sphere grid, compute the maximum and minimum latitudinal extent of the resulting great circle\&. "
.ti -1c
.RI "subroutine \fBmiddle\fP (p1, p2, p)"
.br
.RI "Compute the latitude and longitude of the middle point between two given points\&. "
.in -1c
.SH "Detailed Description"
.PP 
Geo-reference utilities for a cubed-sphere grid\&. 


.PP
\fBAuthor:\fP
.RS 4
Ning Wang 
.RE
.PP

.PP
Definition in file \fBfind_limit\&.F90\fP\&.
.SH "Function/Subroutine Documentation"
.PP 
.SS "subroutine find_limit (real*8, dimension(2), intent(in) p1_in, real*8, dimension(2), intent(in) p2_in, real*8, intent(out) latmin, real*8, intent(out) latmax)"

.PP
Given two points on a cubed-sphere grid, compute the maximum and minimum latitudinal extent of the resulting great circle\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp1_in\fP Latitude and longitude of point 1\&. 
.br
\fIp2_in\fP Latitude and longitude of point 2\&. 
.br
\fIlatmin\fP Minimum latitudinal extent\&. 
.br
\fIlatmax\fP Maximum latitudinal extent\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
Ning Wang 
.RE
.PP

.PP
Definition at line 16 of file find_limit\&.F90\&.
.PP
References middle()\&.
.PP
Referenced by cal_lake_frac_depth()\&.
.SS "subroutine middle (real*8, dimension(2), intent(in) p1, real*8, dimension(2), intent(in) p2, real*8, dimension(2), intent(out) p)"

.PP
Compute the latitude and longitude of the middle point between two given points\&. There are two formulae available to compute it\&.
.PP
One derived from a more general m-sect formula: 
.PP
.nf

  xyz = sin((1-f)*theta) / sin(theta) * xyz1 +
        sin(f*theta) /sin(theta) * xyz2 ;
  where theta is the angle of xyz1, and xyz2\&.
  
.fi
.PP
.PP
.PP
.nf

  xyz = 0\&.5 / sqrt[(1+dot(xyz1,xyz2))/2] * (xyz1+xyz2)
  
.fi
.PP
.PP
and the other one is the normalized middle point of the two end points:
.PP
.PP
.nf

  xyz = 0\&.5 * (xyz1+xyz2), xyz = xyz / sqrt(dot(xyz,xyz))
  
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIp1\fP Latitude/longitude of first end point\&. 
.br
\fIp2\fP Latitude/longitude of second end point 
.br
\fIp\fP Latitude/longitude of the mid-point\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
Ning Wang 
.RE
.PP
\fBDate:\fP
.RS 4
March, 2006 
.RE
.PP

.PP
Definition at line 80 of file find_limit\&.F90\&.
.PP
Referenced by find_limit()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for orog_mask_tools from the source code\&.
